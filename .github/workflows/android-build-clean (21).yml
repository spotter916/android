name: Build Android App Bundle

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'android/**'
      - 'src/**'
      - 'shared/**'
      - 'package.json'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Verify project structure
      run: |
        echo "Current directory:"
        pwd
        echo "Project structure:"
        ls -la
        echo "Source directory:"
        ls -la src/
        echo "Node version:"
        node --version
        echo "NPM version:"
        npm --version
      
    - name: Debug and find index.html
      run: |
        echo "üîç DEBUGGING: Finding all index.html files..."
        find . -name "index.html" -not -path "./node_modules/*" 2>/dev/null || echo "No index.html found"
        echo ""
        echo "üìÅ Checking directory contents:"
        echo "Root level:"
        ls -la | head -10
        echo ""
        echo "Client directory exists?"
        ls -la client/ 2>/dev/null && echo "‚úì client/ exists" || echo "‚úó client/ missing"
        echo ""
        echo "Source directory exists?"
        ls -la src/ 2>/dev/null && echo "‚úì src/ exists" || echo "‚úó src/ missing"
        
    - name: Create assets and vite config
      run: |
        echo "Creating attached_assets directory and using actual app icon..."
        mkdir -p attached_assets
        
        # Use the actual launcher icon from Android app (highest resolution available)
        if [ -f "android/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png" ]; then
          cp "android/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png" "attached_assets/app Icon.png"
          cp "android/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png" "attached_assets/app icon 1024.png"
          echo "‚úÖ Created app icons from actual launcher icon"
        elif [ -f "client/public/icons/icon-192x192.png" ]; then
          cp "client/public/icons/icon-192x192.png" "attached_assets/app Icon.png"
          echo "‚úÖ Created app Icon.png from existing public icon"
          if [ -f "client/public/icons/icon-512x512.png" ]; then
            cp "client/public/icons/icon-512x512.png" "attached_assets/app icon 1024.png"
            echo "‚úÖ Created app icon 1024.png from existing public icon"
          else
            cp "attached_assets/app Icon.png" "attached_assets/app icon 1024.png"
            echo "‚úÖ Created app icon 1024.png as copy of app Icon.png"
          fi
        else
          # Create a simple placeholder if no icons exist
          echo "Creating placeholder app Icon.png..."
          echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg==" | base64 -d > "attached_assets/app Icon.png"
          cp "attached_assets/app Icon.png" "attached_assets/app icon 1024.png"
        fi
        
        echo "Creating clean vite.config.ts with correct alias configuration..."
        cat > vite.config.ts << 'EOF'
        import { defineConfig } from 'vite'
        import react from '@vitejs/plugin-react'
        import path from 'path'

        export default defineConfig({
          plugins: [react()],
          resolve: {
            alias: {
              "@": path.resolve(__dirname, "src"),
              "@shared": path.resolve(__dirname, "shared"),
              "@assets": path.resolve(__dirname, "attached_assets")
            }
          },
          build: {
            outDir: 'dist/public',
            emptyOutDir: true
          }
        })
        EOF
        echo "‚úÖ Created clean vite.config.ts"

    - name: Build web assets  
      run: |
        echo "Building web assets..."
        echo "üìÅ Structure: index.html in root, App.tsx in src/, alias '@' ‚Üí 'src/'"
        npx vite build --outDir dist/public --emptyOutDir
      
    - name: Sync Capacitor
      run: |
        npx cap sync android
        npx cap copy android
        
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Create keystore from secret
      run: |
        echo "üîß Creating keystore from base64 secret using absolute path..."
        echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > "$GITHUB_WORKSPACE/android/app/release.keystore"
        echo "‚úÖ Keystore created successfully"
        ls -la "$GITHUB_WORKSPACE/android/app/release.keystore"
        echo "üìä Keystore file size: $(wc -c < "$GITHUB_WORKSPACE/android/app/release.keystore") bytes"
        
    - name: Build Android App Bundle
      working-directory: android
      env:
        ANDROID_STORE_PASSWORD: temppass123
        ANDROID_KEY_ALIAS: upload
        ANDROID_KEY_PASSWORD: temppass123
      run: |
        chmod +x gradlew
        echo "android.useAndroidX=true" >> gradle.properties
        echo "android.enableJetifier=true" >> gradle.properties
        echo "kotlin.jvm.target.validation.mode=WARNING" >> gradle.properties
        echo "org.gradle.jvmargs=-Xmx4096m -XX:MaxMetaspaceSize=1024m" >> gradle.properties
        echo ""
        echo "üîê Checking keystore file..."
        ls -la "$GITHUB_WORKSPACE/android/app/release.keystore"
        echo "‚úÖ Keystore file verified"
        echo ""
        echo "üöÄ Building signed Android App Bundle with absolute path injection..."
        ./gradlew clean
        ./gradlew bundleRelease \
          -Pandroid.injected.signing.store.file="$GITHUB_WORKSPACE/android/app/release.keystore" \
          -Pandroid.injected.signing.store.password="$ANDROID_STORE_PASSWORD" \
          -Pandroid.injected.signing.key.alias="$ANDROID_KEY_ALIAS" \
          -Pandroid.injected.signing.key.password="$ANDROID_KEY_PASSWORD" \
          --no-daemon -Dkotlin.jvm.target=17 --stacktrace
      
    - name: Upload Android App Bundle
      uses: actions/upload-artifact@v4
      with:
        name: android-app-bundle-v3
        path: android/app/build/outputs/bundle/release/app-release.aab
